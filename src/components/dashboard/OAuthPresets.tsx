import { Button } from "@/components/ui/button";

export interface OAuthPreset {
  name: string;
  type: string;
  auth_type: 'oauth' | 'api_token';
  oauth_authorize_url?: string;
  oauth_token_url?: string;
  oauth_scopes?: string;
  instructions: string;
}

const getRedirectUrl = () => {
  return `${window.location.origin}/dashboard/integrations`;
};

export const OAUTH_PRESETS: OAuthPreset[] = [
  {
    name: "Atlassian - API Token (—Ä–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–æ)",
    type: "atlassian",
    auth_type: "api_token",
    instructions: `üîë –ü—Ä–æ—Å—Ç–∏–π —Å–ø–æ—Å—ñ–± - API Token + Email:

1. –ü–µ—Ä–µ–π–¥—ñ—Ç—å –Ω–∞ https://id.atlassian.com/manage-profile/security
2. –ù–∞—Ç–∏—Å–Ω—ñ—Ç—å "Create and manage API tokens"
3. "Create API token" ‚Üí –í–∫–∞–∂—ñ—Ç—å –Ω–∞–∑–≤—É ‚Üí "Create"
4. –°–∫–æ–ø—ñ—é–π—Ç–µ —Ç–æ–∫–µ–Ω (–ø–æ–∫–∞–∑—É—î—Ç—å—Å—è –ª–∏—à–µ —Ä–∞–∑!)
5. –í–∞–º –∑–Ω–∞–¥–æ–±–∏—Ç—å—Å—è:
   ‚Ä¢ Email –≤–∞—à–æ–≥–æ Atlassian –∞–∫–∞—É–Ω—Ç—É
   ‚Ä¢ API Token —è–∫–∏–π –≤–∏ —â–æ–π–Ω–æ —Å—Ç–≤–æ—Ä–∏–ª–∏

–¶–µ –¥–∞—î –¥–æ—Å—Ç—É–ø –¥–æ –≤—Å—ñ—Ö Jira + Confluence —Ä–µ—Å—É—Ä—Å—ñ–≤ –≤–∞—à–æ–≥–æ –∞–∫–∞—É–Ω—Ç—É.`
  },
  {
    name: "Atlassian - OAuth 2.0 (–¥–ª—è –¥–æ–¥–∞—Ç–∫—ñ–≤)",
    type: "atlassian",
    auth_type: "oauth",
    oauth_authorize_url: "https://auth.atlassian.com/authorize",
    oauth_token_url: "https://auth.atlassian.com/oauth/token",
    oauth_scopes: "read:jira-work read:jira-user read:servicedesk-request read:servicemanagement-insight-objects read:confluence-space.summary read:confluence-props read:confluence-content.all read:confluence-content.summary search:confluence read:confluence-user read:confluence-groups offline_access",
    instructions: `‚öôÔ∏è –°–∫–ª–∞–¥–Ω–∏–π —Å–ø–æ—Å—ñ–± - OAuth 2.0 (–¥–ª—è –æ—Ä–≥–∞–Ω—ñ–∑–∞—Ü—ñ–π–Ω–∏—Ö –¥–æ–¥–∞—Ç–∫—ñ–≤):

1. –°—Ç–≤–æ—Ä—ñ—Ç—å OAuth 2.0 app –Ω–∞ https://developer.atlassian.com/console/myapps
2. "Create" ‚Üí "OAuth 2.0 integration"
3. Callback URL: ${getRedirectUrl()}
4. Permissions ‚Üí Configure –≤—Å—ñ –Ω–µ–æ–±—Ö—ñ–¥–Ω—ñ scopes
5. Client ID —Ç–∞ Secret –∑ Settings

–í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ —Ç—ñ–ª—å–∫–∏ —è–∫—â–æ –≤–∞–º –ø–æ—Ç—Ä—ñ–±–µ–Ω app-to-app –¥–æ—Å—Ç—É–ø.`
  },
  {
    name: "Google Drive",
    type: "google_drive",
    auth_type: "oauth",
    oauth_authorize_url: "https://accounts.google.com/o/oauth2/v2/auth",
    oauth_token_url: "https://oauth2.googleapis.com/token",
    oauth_scopes: "https://www.googleapis.com/auth/drive.readonly https://www.googleapis.com/auth/userinfo.email",
    instructions: `1. –°—Ç–≤–æ—Ä—ñ—Ç—å –ø—Ä–æ—î–∫—Ç –Ω–∞ https://console.cloud.google.com
2. –£–≤—ñ–º–∫–Ω—ñ—Ç—å Google Drive API
3. OAuth consent screen ‚Üí –ù–∞–ª–∞—à—Ç—É–π—Ç–µ –¥–∞–Ω—ñ –¥–æ–¥–∞—Ç–∫—É
4. Credentials ‚Üí Create OAuth 2.0 Client ID ‚Üí Web application
5. Authorized redirect URIs: ${getRedirectUrl()}
6. –°–∫–æ–ø—ñ—é–π—Ç–µ Client ID —Ç–∞ Client Secret`
  },
  {
    name: "GitHub",
    type: "github",
    auth_type: "oauth",
    oauth_authorize_url: "https://github.com/login/oauth/authorize",
    oauth_token_url: "https://github.com/login/oauth/access_token",
    oauth_scopes: "repo read:user",
    instructions: `1. –ü–µ—Ä–µ–π–¥—ñ—Ç—å –Ω–∞ https://github.com/settings/developers
2. OAuth Apps ‚Üí New OAuth App
3. Authorization callback URL: ${getRedirectUrl()}
4. –°–∫–æ–ø—ñ—é–π—Ç–µ Client ID
5. Generate a new client secret ‚Üí –°–∫–æ–ø—ñ—é–π—Ç–µ`
  },
  {
    name: "Microsoft 365",
    type: "microsoft",
    auth_type: "oauth",
    oauth_authorize_url: "https://login.microsoftonline.com/common/oauth2/v2.0/authorize",
    oauth_token_url: "https://login.microsoftonline.com/common/oauth2/v2.0/token",
    oauth_scopes: "Files.Read.All User.Read offline_access",
    instructions: `1. –°—Ç–≤–æ—Ä—ñ—Ç—å app –Ω–∞ https://portal.azure.com
2. Azure Active Directory ‚Üí App registrations ‚Üí New registration
3. Redirect URI (Web): ${getRedirectUrl()}
4. API permissions ‚Üí Add Microsoft Graph permissions
5. Certificates & secrets ‚Üí New client secret
6. –°–∫–æ–ø—ñ—é–π—Ç–µ Application (client) ID —Ç–∞ Secret value`
  },
  {
    name: "Slack",
    type: "slack",
    auth_type: "oauth",
    oauth_authorize_url: "https://slack.com/oauth/v2/authorize",
    oauth_token_url: "https://slack.com/api/oauth.v2.access",
    oauth_scopes: "channels:read files:read users:read",
    instructions: `1. –°—Ç–≤–æ—Ä—ñ—Ç—å Slack App –Ω–∞ https://api.slack.com/apps
2. OAuth & Permissions ‚Üí Redirect URLs
3. –î–æ–¥–∞–π—Ç–µ: ${getRedirectUrl()}
4. Bot Token Scopes ‚Üí Add scopes
5. Basic Information ‚Üí App Credentials
6. –°–∫–æ–ø—ñ—é–π—Ç–µ Client ID —Ç–∞ Client Secret`
  },
];

interface OAuthPresetsProps {
  onSelect: (preset: OAuthPreset) => void;
}

export function OAuthPresets({ onSelect }: OAuthPresetsProps) {
  return (
    <div className="grid grid-cols-1 gap-3">
      <p className="text-sm text-muted-foreground mb-2">
        –û–±–µ—Ä—ñ—Ç—å –≥–æ—Ç–æ–≤–∏–π —à–∞–±–ª–æ–Ω –∞–±–æ —Å—Ç–≤–æ—Ä—ñ—Ç—å –≤–ª–∞—Å–Ω—É —ñ–Ω—Ç–µ–≥—Ä–∞—Ü—ñ—é:
      </p>
      {OAUTH_PRESETS.map((preset) => (
        <Button
          key={preset.type}
          variant="outline"
          className="justify-start h-auto py-3"
          onClick={() => onSelect(preset)}
        >
          <div className="text-left">
            <div className="font-medium">{preset.name}</div>
            <div className="text-xs text-muted-foreground mt-1">
              –¢–∏–ø: {preset.type}
            </div>
          </div>
        </Button>
      ))}
    </div>
  );
}